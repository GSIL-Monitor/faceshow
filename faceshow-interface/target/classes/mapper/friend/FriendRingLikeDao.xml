<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.faceshow.modules.friend.dao.FriendRingLikeDao">
  <resultMap id="BaseResultMap" type="com.faceshow.modules.friend.entity.FriendRingLike">
    <id column="like_id" property="likeId" jdbcType="INTEGER" />
    <result column="friend_id" property="friendId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="video_id" property="videoId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List">
      like_id, friend_id, user_id, create_time, video_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/> from friend_ring_like where like_id = #{likeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from friend_ring_like where like_id = #{likeId,jdbcType=INTEGER}
  </delete>
  <insert id="insertSelective">
    insert into friend_ring_like
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="friendId != null" >
        friend_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="videoId != null" >
        video_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="friendId != null" >
        #{friendId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="videoId != null" >
        #{videoId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.faceshow.modules.friend.entity.FriendRingLike">
    update friend_ring_like
    <set >
      <if test="friendId != null" >
        friend_id = #{friendId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="videoId != null" >
        video_id = #{videoId,jdbcType=INTEGER},
      </if>
    </set>
    where like_id = #{likeId,jdbcType=INTEGER}
  </update>

  <!--查询当前朋友圈内容所有点赞 -->
  <select id="findLikeByFriendId" parameterType="java.lang.Integer" resultType="java.util.Map">
    SELECT
        f.like_id likeId,
        f.friend_id friendId,
        f.user_id userId,
        UNIX_TIMESTAMP(f.create_time)*1000 createTime,
        u.nick_name nickName,
        u.img userImg
    FROM
        friend_ring_like f
    LEFT JOIN user_info u ON f.user_id = u.user_id
    WHERE
        f.friend_id = #{friendId}
    ORDER BY
        f.create_time DESC
  </select>

  <!--查看是否已经点赞 -->
  <select id="findLikeByUserIdAndFriendId" resultType="java.lang.Integer">
    select count(1) from friend_ring_like where user_id = #{userId} and friend_id = #{friendId}
  </select>

  <!-- 取消点赞-->
  <delete id="deleteByUserIdAndFriendId">
    delete from friend_ring_like where user_id = #{userId} and friend_id = #{friendId}
  </delete>

  <!--根据朋友圈信息id删除点赞信息 -->
  <delete id="deleteLikeByFriendId" parameterType="java.lang.Integer">
    delete from friend_ring_like where friend_id = #{friendId}
  </delete>
</mapper>